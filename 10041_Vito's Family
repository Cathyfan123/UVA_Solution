package datastructure;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class VitoFamily {
	static int temp,r,mid,median;
	static int[] relatives;
	
	public static void main(String[] args) throws IOException {
		BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(buf.readLine()); // number of test cases
		while (N-- >0) {
			StringTokenizer stk = new StringTokenizer(buf.readLine());
			int r = Integer.parseInt(stk.nextToken()); // number of relatives in this case
			relatives = new int[r];
			for (int i=0;i<r;i++) { 
				relatives[i]=Integer.parseInt(stk.nextToken()); //placing the input into array
			}
			for (int j=1;j<r;j++) { //using Insertion Sort
				int key = relatives[j];
				int k=j-1;			
				while (k>=0 && key<relatives[k]) { //comparing key with previous elements
						relatives[k+1]=relatives[k]; //if previous one is greater, move it backward
						k-=1; //continue to check previous element until reaching the first one
				}
				relatives[k+1]=key; //place the key at suitable position
			}

			int size = relatives.length;
			if (size%2==0) { // there are even elements in the array
				mid = (size/2)-1; //index starts from 0
				median = (int)Math.floor((relatives[mid]+relatives[mid+1])/2);
			}else {
				mid = (int)Math.floor(size/2);
				median = relatives[mid];
			}
			int sum=0;
			for (int l=0;l<r;l++) {
				sum+=Math.abs(relatives[l]-median);
			}
			System.out.println(sum);
		}
		buf.close();
		System.exit(0);
	}
}

